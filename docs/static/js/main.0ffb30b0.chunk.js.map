{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","key","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OACI,6BACI,0BAAMC,SAZO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAE5BR,GAAe,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACpCN,EAAc,QASX,2BAAOO,KAAO,OACdC,MAAOT,EACPU,SAAU,SAACP,GAAD,OAnBS,SAACA,GACvBF,EAAcE,EAAEQ,OAAOF,OAkBLG,CAAkBT,S,uBCxB/BU,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACTC,EADS,iDACuCC,UAAUH,GADjD,+DAEMI,MAAMF,GAFZ,cAEPG,EAFO,gBAGQA,EAAKC,OAHb,uBAGNC,EAHM,EAGNA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR7B,kBAWLM,GAXK,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,yBAAKc,UAAU,4EACZ,yBAAKC,IAAMf,EAAIgB,IAAKN,EAAOO,IAAMR,IACjC,2BAAIC,KCFFQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAY,IAAD,EACVf,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAiBpC,OAZAC,qBAAU,WAGNzB,EAAQC,GAAUyB,MAAK,SAAAC,GAEfH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAGtB,CAACrB,IAEIsB,EDdqBK,CAAa3B,GAA9Ba,EADwB,EAC7BN,KAAYc,EADiB,EACjBA,QAGlB,OACI,oCACD,4BAAKrB,GACJqB,GAAU,sCACb,yBAAKL,UAAY,aAELH,EAAOJ,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAaS,IAAMT,EAAIC,IAAQD,UEiBnDkB,EA3BK,WAAI,MAGY3C,mBAAS,CAAC,cAHtB,mBAGjB4C,EAHiB,KAGL7C,EAHK,KAWpB,OAAQ,6BACJ,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGM6C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACAmB,IAAMnB,EACNA,SAAWA,S,MClB7B8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0ffb30b0.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n                   \r\n        setCategories (cats=>[inputValue,...cats]);\r\n        setInputValue(' ')\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n           <input type = \"text\"\r\n           value={inputValue}\r\n           onChange={(e)=>handleInputChange(e)}></input>\r\n           \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n   AddCategory.propTypes ={\r\n        setCategories: PropTypes.func.isRequired\r\n   }\r\n    \r\n","export const getGifs = async(category)=>{\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZqKGXoYKr5TjlcMK6QQBZDB0LfZLMcUJ`\r\n          const resp = await fetch(url);\r\n          const {data} = await resp.json();\r\n          const gifs = data.map(img =>{\r\n              return {\r\n                  id: img.id,\r\n                  title: img.title,\r\n                  url: img.images?.downsized_medium.url \r\n              }\r\n          })\r\n          return (gifs);\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated   animate__fadeInRight animate__lightSpeedInRight\">\r\n           <img src ={url}alt={title} key ={id}></img> \r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n   const {data:images,loading}= useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n       <h3>{category}</h3> \r\n       {loading &&<p>Loading</p>}\r\n     <div className = \"card-grid\">\r\n               {\r\n                 images.map(img=> (<GifGridItem key ={img.id} {...img}/>))\r\n               }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = (category)=>{\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(()=>{\r\n\r\n\r\n        getGifs(category).then(imgs=>{\r\n         \r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                });     \r\n        })\r\n    },[category])\r\n\r\n    return state;\r\n}","import React, { useState }from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp= ()=>{\r\n\r\n//const categories = ['One Punch','Samurai X','Full Metal'];\r\nconst [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n/*const handlleAdd = ()=>{\r\n    setCategories([...categories,'Samura X']);\r\n    \r\n}*/\r\n\r\n\r\n    return (<div>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/> \r\n        <hr></hr>\r\n    \r\n          {\r\n              categories.map(category => (\r\n                  <GifGrid \r\n                  key ={category}\r\n                  category ={category}/>\r\n              ))\r\n          } \r\n           \r\n    </div>)\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp/>,\n\n  document.getElementById('root')\n);\n\n;\n"],"sourceRoot":""}